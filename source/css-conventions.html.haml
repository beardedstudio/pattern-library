---
title: CSS Conventions
---

.content
  %h2.page-title CSS Conventions

  %section.content-section
    %h3 Stylesheet Directory Structure
    %p Stylesheets for Bearded sites are broken into partials, and imported individually using the <code>@import 'path/to/file'</code> syntax. This allows the developer to control the stylesheets&rsquo; load order. Stylesheets (except libraries) are located in <code>assets/stylesheets</code> and are loaded in the following order:

    .primary
      %ol
        %li Third-party libraries like Breakpoint
        %li <code>stylesheets/library</code> Reusable variables and mixins
        %li <code>stylesheets/globals</code> General element styles
        %li <code>stylesheets/modules</code> Modular styles for groups of elements
        %li <code>stylesheets/contexts</code> Contextual styles

    %p When considering where styles belong, we can think of them as layers of increasing specificity.

    %h4 Third-Party Libraries
    %p These are libraries we didn't create, like Breakpoint. We load these first, and they function as a very basic foundation on which all of our work sits.

    %h4 Library
    %p The library is where we keep all of our variables and mixins. These are things that by themselves don&rsquo;t have an effect on the appearance of anything. They&rsquo;re the building blocks of our CSS that will be called into action elsewhere in our stylesheets.

    %h4 Globals
    %p These is where our first direct visual styling occurs. These are broad styles that are largely context- and content-agnostic. Here we might style basic form elements, icons, or typographic elements.

    %h4 Modules
    %p Modular styles focus on content rather than context. A module, in other words is a &ldquo;what,&rdquo; not a &ldquo;where.&rdquo; For instance, we might have a pager module that sits at the bottom of lists of items that exceed the desired page length. This pager may look slightly different on various list pages, but there is some common styling that applies to all situations. This is where those core styles that define what it is to be a pager are kept.

    %h4 Contextual
    %p As the name implies, these styles have everything to do with context. For instance, if that same pager module looks a little different on the messages list view than it looks everywhere else, then those styles can be placed in the messages partial.
    %p Example of partials and load order:

    :code
      # lang: scss
      // Breakpoint library
      @import "breakpoint";

      @import "library/reset";
      @import "library/grid";
      @import "library/variables";
      @import "library/mediaqueries";
      @import "library/typographic-mixins";
      @import "library/general-mixins";
      @import "library/icons";

      @import "globals/forms";
      @import "globals/general";

      @import "modules/navigation";

      @import "contexts/site-header";
      @import "contexts/site-footer";
  %section.content-section
    %h3 Comments
    %p Comments in Sass could appear in two ways. If you want to have an in-context description of the code to help others understand your choices, just use the minimum 2 slashes:
    :code
      # lang: scss
      // This is necessary to make things work
      .item-tag {
        [...]
      }
    %p If you want to designate a section of a partial with a heading, use 5 slashes:
    :code
      # lang: scss
      ///// Section Name
      .section-stuff {
        [...]
      }
  %section.content-section
    %h3 Style Rules
    .primary
      %ul
        %li We use hyphens, not underscores, unless underscores are required.
        %li We use all lowercase characters, unless uppercase characters are required.
        %li We use 2 spaces as tabs for indents.
        %li We use double quotes, not single quotes, unless single quotes are required.
        %li We use classes, not IDs, unless IDs are required.
        %li Never use !important except for testing.
        %li In Sass, put your includes before your CSS declarations, unless you need to do otherwise for specificity reasons.
        %li In your Sass, leave line breaks between groups of code to help others parse your work; logical groupings of code should be separated from each other with vertical space.
